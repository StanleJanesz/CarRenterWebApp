<style>
	.pagination{
		display: flex; /* Flexbox for layout */
		align-items: center; /* Center items vertically */
		justify-content:center;
		padding-bottom:20px;
	}
	.pagination a {
		color: black;
		float: left;
		padding: 8px 16px;
		text-decoration: none;
		transition: background-color .3s;
	}

		/* Style the active/current link */
		.pagination a.active {
			background-color: dodgerblue;
			color: white;
		}

		/* Add a grey background color on mouse-over */
		.pagination a:hover:not(.active) {
			background-color: #ddd;
		}</style>
<div class="pagination">
	<a @onclick="Left">&laquo;</a>
	@for (int i = 0; i < maxPages; i++)
	{
		var value = i;
		if (currentPage == i)
		{
			<a class="active" @onclick="()=> Pagingclick(value)">@(i + 1)</a>
		}
		else
		{
			<a @onclick="()=> Pagingclick(value)">@(i + 1)</a>
		}
	}
	<a @onclick="Right">&raquo;</a>
</div>

@code {
	[Parameter] public int currentPage { get; set; } = 0;
	[Parameter] public int maxPages { get; set; } = 1;
	[Parameter] public EventCallback<int> OnChange { get; set; }
	private void Pagingclick(int i)
	{
		currentPage = i;
		OnChange.InvokeAsync(currentPage);
	}
	private void Right(MouseEventArgs e)
	{
		if (currentPage < maxPages-1)
		{
			currentPage++;
		}
		OnChange.InvokeAsync(currentPage);
	}
	private void Left(MouseEventArgs e)
	{
		if (currentPage > 0)
		{
			currentPage--;
		}
		OnChange.InvokeAsync(currentPage);
	}
}

