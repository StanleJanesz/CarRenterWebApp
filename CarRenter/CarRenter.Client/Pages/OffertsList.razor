@page "/"
@rendermode InteractiveWebAssembly
@inject CarService CarService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
<head>
    <link href="css/my-styles.css" rel="stylesheet" />
</head>
<PageTitle>OffertsLists</PageTitle>

<h1>OffertsLists</h1>

<h3> tutaj jest lista ofert różnych firm po wyborze modelu i marki w menu głównym </h3>
<hr />
<hr />
<h4> dla ułatwienia wersji roboczej wszystkie strony są wylistowane w lewym menu w przyszłosci zostanie wprowadzony poprawny routing</h4>
<hr />
<hr />

@using CarRenter.Client.Classes



<label for="brand">Choose a Brand:</label>
<select id="brand" @onchange="OnBrandChange">
    <option value="">Select a brand</option>
    @foreach (var brand in CarService.CarsDictionary.Keys)
    {
        <option value="@brand">@brand</option>
    }
</select>

<label for="model">Choose a Model:</label>
<select id="model"  @onchange="OnModelChange" disabled="@(!models.Any())">
    <option value="">Select a model</option>
    @foreach (var model in models)
    {
        <option value="@model">@model</option>
    }
</select>


    <div @ref="table" >

        <table id="cars">
            <thead>
                <tr>
                    <th scope="col">image</th>
                    <th scope="col">make</th>
                    <th scope="col">model</th>
                    <th scope="col">rent</th>
                </tr>
            </thead>


            <tbody>
                @for (int i = ppage; i < Math.Min(ppage + 5, maxpages); i++)
                {
                var value = i;
                <tr >

                        <td>Image</td>
                        <td>@currentcars[i].brand</td>
                        <td>@currentcars[i].model</td>
                        <td>
                        <NavLink class="nav-link" href="OffertView" @onclick="() => OnClickHandler(value)">
                                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> View offert
                            </NavLink>
                        </td>
                    </tr>
                }
            </tbody>

            </table>
    
</div>
<div class="pagination">
    <a @onclick="Left">&laquo;</a>
    @for (int i = 0; i < maxpages / 5 + Math.Min(maxpages % 5, 1); i++)
    {
        var value = i;
        if (ppage / 5 == i)
        {
            <a class="active" @onclick="()=> Paging(value)">@(i + 1)</a>
        }
        else
        {
            <a @onclick="()=> Paging(value)">@(i + 1)</a>
        }
    }
    <a @onclick="Right">&raquo;</a>
</div>





@code {
    private List<string> models = new();
    private string selectedBrand;
    private string? selectedModel;
    private int ppage;
    private int maxpages;
    private List<Car> currentcars = new();
    private bool updatetable = false;
    private ElementReference table;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var storedDictionary = await LocalStorage.GetItemAsync<Dictionary<string, Dictionary<string, List<Car>>>>("carsDictionary");
            CarService.CarsDictionary = storedDictionary ?? LoadSampleData();
            CarService.SelectedCar = await LocalStorage.GetItemAsync<Car>("selectedCar");
            currentcars = CarService.CarsDictionary.Values.SelectMany(dict => dict.Values).SelectMany(list => list).ToList();
            maxpages = currentcars.Count();
            ppage = 0;
            StateHasChanged();
        }
       
    }

    private Dictionary<string, Dictionary<string, List<Car>>> LoadSampleData()
    {
        var sampleData =Car.LoadCarsFrom();
        LocalStorage.SetItemAsync("carsDictionary", sampleData);
        return sampleData;
    }

    private async Task OnBrandChange(ChangeEventArgs e)
    {
        selectedBrand = e.Value?.ToString();

        if (!string.IsNullOrEmpty(selectedBrand) && CarService.CarsDictionary.ContainsKey(selectedBrand))
        {
            models = CarService.CarsDictionary[selectedBrand].Keys.ToList();
            currentcars = CarService.CarsDictionary[selectedBrand].Values.SelectMany(list => list).ToList();
        }
        else
        {
            models.Clear();
            currentcars = CarService.CarsDictionary.Values.SelectMany(dict => dict.Values).SelectMany(list => list).ToList();
        }
        ppage = 0;
        maxpages = currentcars.Count();
        selectedModel = null;
        //CarService.SelectedCar = null;

        // await LocalStorage.SetItemAsync("selectedCar", CarService.SelectedCar);
    }

    private async Task OnModelChange(ChangeEventArgs e)
    {
        selectedModel = e.Value?.ToString();

        if (!string.IsNullOrEmpty(selectedModel) && CarService.CarsDictionary[selectedBrand].ContainsKey(selectedModel))
        {

            currentcars = CarService.CarsDictionary[selectedBrand][selectedModel];
        }
        else
        {
            currentcars = CarService.CarsDictionary[selectedBrand].Values.SelectMany(list => list).ToList();
        }
        ppage = 0;
        maxpages = currentcars.Count();
        // await LocalStorage.SetItemAsync("selectedCar", CarService.SelectedCar);
    }
    private async void OnClickHandler(int i)
    {
        CarService.SetSelectedCar(currentcars[i]);  
        await LocalStorage.SetItemAsync("selectedCar", CarService.SelectedCar);
    }
    private async void Paging(int i)
    {
        ppage = i * 5;
    }
    private void Right(MouseEventArgs e)
    {
        if (ppage + 5 < maxpages)
        {
            ppage += 5;
        }
    }
    private void Left(MouseEventArgs e)
    {
        if (ppage > 0)
        {
            ppage -= 5;
        }
    }
}
@* przesunąć do folderu style*@
<style>
    /* Pagination links */
    .pagination a {
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
    }

        /* Style the active/current link */
        .pagination a.active {
            background-color: dodgerblue;
            color: white;
        }

        /* Add a grey background color on mouse-over */
        .pagination a:hover:not(.active) {
            background-color: #ddd;
        }

    table {
        border-collapse: collapse;
        border: 2px solid rgb(140 140 140);
        font-family: sans-serif;
        font-size: 0.8rem;
        letter-spacing: 1px;
    }

    caption {
        caption-side: bottom;
        padding: 10px;
        font-weight: bold;
    }

    thead,
    tfoot {
        background-color: rgb(228 240 245);
    }

    th,
    td {
        border: 1px solid rgb(160 160 160);
        padding: 8px 10px;
    }

        td:last-of-type {
            text-align: center;
        }

    tbody > tr:nth-of-type(even) {
        background-color: rgb(237 238 242);
    }

    tfoot th {
        text-align: right;
    }

    tfoot td {
        font-weight: bold;
    }

</style>